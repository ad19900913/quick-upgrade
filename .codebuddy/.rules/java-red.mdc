---
description:"java 红线"
globs:
alwaysApply: true
---

# Cursor 开发规范与安全检查规则

## 云平台开发红线

### 1. 文件上传安全

- **红线**：文件上传必须限定上传文件大小、数量，文件类型根据实际情况确定
- **检查点**：
  - 文件大小限制
  - 文件数量限制  
  - 文件类型白名单验证
  - 文件内容安全检查

### 2. SQL注入防护

- **红线**：禁止直接使用不可信数据来拼接SQL语句
- **红线**：禁止在所有的外部输入使用，例如：接口、用户输入
- **检查点**：
  - 使用参数化查询（PreparedStatement）
  - 避免字符串拼接SQL
  - 输入数据验证和转义
  - 使用ORM框架的安全查询方法

### 3. 密钥和密码安全

- **红线**：禁止硬编码秘钥、密码、用户口令
- **红线**：禁止非安全的HTTP请求中传输明文秘钥、密码、口令信息，应使用安全的HTTPS方式
- **红线**：禁止使用可能泄露秘钥、加密信息的前端加密算法
- **红线**：禁止代码中存在明文秘钥、密码、口令
- **红线**：禁止弱密码、弱口令
- **检查点**：
  - 使用配置文件或环境变量存储敏感信息
  - 使用加密存储敏感数据
  - 强制使用HTTPS传输敏感信息
  - 密码强度验证
  - 避免在前端进行敏感信息加密

### 4. 加密算法安全

- **红线**：禁止使用私有或者弱加密算法
- **检查点**：
  - 使用标准加密算法（AES、RSA等）
  - 避免使用MD5、SHA1等弱算法
  - 使用安全的随机数生成器

### 5. 日志安全

- **红线**：禁止在日志中打印明文的一级敏感信息如秘钥、密码、token信息
- **红线**：管理型操作类型的非GET请求需记录操作日志
- **红线**：生产环境，禁止默认开启debug日志
- **检查点**：
  - 敏感信息脱敏处理
  - 操作日志记录完整性
  - 生产环境日志级别控制

### 6. 系统安全配置

- **红线**：禁止安装非必要测试服务
- **红线**：禁止开启非必要的端口
- **红线**：禁止开启全局监听端口
- **检查点**：
  - 服务最小化原则
  - 端口访问控制
  - 网络安全配置

### 7. 资源管理

- **红线**：禁止不关闭资源，例如文件、网络、对象
- **检查点**：
  - 使用try-with-resources语句
  - 显式关闭资源
  - 资源泄漏检查

### 8. 第三方组件管理

- **红线**：禁止私自引入第三方组件，使用三方库必须通过系统组评审
- **检查点**：
  - 组件引入审批流程
  - 组件安全性评估
  - 版本管理

### 9. 数据类型安全

- **红线**：接口返回前端的超大Long类型，诸如雪花ID等，必须使用String类型返回，否则会出现精度丢失
- **检查点**：
  - 大数值类型使用String返回
  - 精度丢失风险检查

### 10. 代码规范

- **红线**：代码和注释中都要避免使用任何语言的种族歧视性词语
- **红线**：禁止出现接口文档与实现不一致，如有变动，需先修改接口文档并评审通过后，再修改实现，接口文档必须有修订记录
- **检查点**：
  - 代码审查中的敏感词汇检查
  - 接口文档同步更新
  - 文档版本管理

## JAVA编码红线

### 1. 开发环境配置

- **红线**：IDE的text file encoding设置为UTF-8；IDE中文件的换行符使用Unix格式，不要使用Windows格式
- **检查点**：
  - 文件编码设置
  - 换行符格式统一

### 2. 数据类型定义

- **红线**：定义数据对象DO类时，属性类型必须和数据库字段类型相匹配
- **红线**：时间戳字段类型定义，必须是Long类型，避免溢出
- **检查点**：
  - 数据类型映射正确性
  - 时间戳类型使用Long

### 3. Stream API使用

- **红线**：在使用java.util.stream.Collectors类的toMap()方法转为Map集合时，一定要使用含有参数类型为BinaryOperator，参数名为mergeFunction的方法，否则当出现相同key值时会抛出IllegalStateException异常
- **红线**：在使用java.util.stream.Collectors类的toMap()方法转为Map集合时，一定要注意当value为null时会抛NPE异常
- **检查点**：
  - toMap方法使用mergeFunction参数
  - null值处理
  - 异常处理机制

### 4. 线程管理

- **红线**：线程资源必须通过线程池提供，不允许在应用中自行显式创建线程
- **红线**：ThreadLocal变量，必须显式回收，否则会影响业务逻辑和出现内存泄漏
- **红线**：Thread#run方法死循环逻辑中，catch捕获异常必须是Throwable，不能仅捕获InterruptedException，避免其他异常导致工作线程退出
- **检查点**：
  - 使用线程池管理线程
  - ThreadLocal资源回收
  - 异常处理完整性

### 5. 性能优化

- **红线**：禁止用BeanUtils进行属性的copy，性能差，并且问题难以排查，推荐使用get/set方法
- **红线**：生产环境禁止直接使用System.out或System.err输出日志或使用e.printStackTrace()打印异常堆栈
- **检查点**：
  - 避免使用BeanUtils
  - 使用标准日志框架
  - 异常处理规范化

### 6. 测试规范

- **红线**：单元测试代码必须写在如下工程目录：src/test/，不允许写在业务代码目录下，禁止测试代码上生产
- **检查点**：
  - 测试代码目录规范
  - 测试代码不上生产环境

## 代码审查检查清单

### 安全检查

- [ ] 文件上传安全验证
- [ ] SQL注入防护
- [ ] 敏感信息保护
- [ ] 加密算法安全性
- [ ] 日志安全配置
- [ ] 系统安全配置
- [ ] 资源管理
- [ ] 第三方组件安全

### 编码规范检查

- [ ] 开发环境配置
- [ ] 数据类型定义
- [ ] Stream API使用
- [ ] 线程管理
- [ ] 性能优化
- [ ] 测试规范

### 文档规范

- [ ] 接口文档同步
- [ ] 代码注释规范
- [ ] 敏感词汇检查

## 自动化检查建议

### IDE插件配置

- SonarQube插件
- SpotBugs插件
- Checkstyle插件
- PMD插件

### 代码扫描工具

- 静态代码分析
- 安全漏洞扫描
- 依赖组件安全扫描

### CI/CD集成

- 自动化代码审查
- 安全测试集成
- 合规性检查

## 应急处理流程

### 发现安全漏洞时

1. 立即停止相关功能
2. 评估影响范围
3. 制定修复方案
4. 执行修复
5. 验证修复效果
6. 记录事件和处理过程

### 代码规范违规时

1. 识别违规类型
2. 评估影响程度
3. 制定整改计划
4. 执行整改
5. 验证整改效果
6. 更新相关文档

---

**注意**：本规则文档应定期更新，确保与最新的安全标准和编码规范保持一致。所有开发人员必须严格遵守这些规则，确保代码质量和系统安全。